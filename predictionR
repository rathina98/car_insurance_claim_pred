library(ggplot2)
library(dplyr)
library(caret)
library(caTools)    
library(doParallel)

setwd("C:/Users/Admin/Documents/insurance_train.csv")
setwd("C:/Users/Admin/Documents/insurance_test.csv")
tr<-read.csv("insurance_train.csv")
tt<-read.csv("insurance_test.csv")
str(tr)
summary(tr)
tt$is_claim<-0

#Checking for Missing Values
all<-rbind(tr,tt)
is.na(all)
table(is.na(all))

#Converting vectors into factors
tr$is_claim<-as.factor(tr$is_claim)
tr$ncap_rating<-as.factor(tr$ncap_rating)
tr$gear_box<-as.factor(tr$gear_box)
tr$cylinder<-as.factor(tr$cylinder)
tr$airbags<-as.factor(tr$airbags)
tr$make<-as.factor(tr$make)
tr$engine_type<-as.factor(tr$engine_type)
tr$fuel_type<-as.factor(tr$fuel_type)
tr$transmission_type<-as.factor(tr$transmission_type)
tr$steering_type<-as.factor(tr$steering_type)
tr$rear_brakes_type<-as.factor(tr$rear_brakes_type)
tr$segment<-as.factor(tr$segment)
tr$model<-as.factor(tr$model)
tr$area_cluster<-as.factor(tr$area_cluster)
summary(tr)
dim(tr)

#Data Visualisation
ggplot(tr,aes(policy_tenure))+geom_freqpoly(bin=30)
ggplot(tr,aes(policy_tenure,col=is_claim))+geom_freqpoly(bins=30)
ggplot(tr,aes(age_of_car))+
  geom_histogram(bins=30)
ggplot(tr,aes(age_of_car,fill=model))+
  geom_histogram(bins=30)
ggplot(tr,aes(age_of_car,x=is_claim))+
  geom_boxplot(outlier.color ="dark green")
ggplot(tr,aes(age_of_policyholder))+
  geom_histogram(bins=30)
ggplot(tr,aes(age_of_policyholder,fill=is_claim))+
  geom_histogram(bins=30)
ggplot(tr,aes(age_of_policyholder,x=is_claim))+
  geom_boxplot(outlier.color ="dark green")
ggplot(tr,aes(area_cluster))+
  geom_bar()
ggplot(tr,aes(area_cluster,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(population_density))+
  geom_freqpoly()
ggplot(tr,aes(population_density,col=is_claim))+
  geom_freqpoly()
ggplot(tr,aes(make))+
  geom_bar()
ggplot(tr,aes(age_of_car,x=make))+
  geom_boxplot(outlier.colour = "navy blue")
ggplot(tr,aes(make,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(age_of_car,x=make,fill=is_claim))+
  geom_boxplot()
ggplot(tr,aes(segment))+
  geom_bar()
ggplot(tr,aes(segment,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(fuel_type))+
  geom_bar()
ggplot(tr,aes(fuel_type,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(model))+
  geom_bar()
ggplot(tr,aes(model,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(cylinder))+
  geom_bar()
ggplot(tr,aes(cylinder ,age_of_car,fill=is_claim))+
  geom_boxplot(outlier.color ="dark green")
ggplot(tr,aes(transmission_type))+
  geom_bar()
ggplot(tr,aes(transmission_type,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(transmission_type ,age_of_car,fill=is_claim))+
  geom_boxplot(outlier.color ="dark green")
ggplot(tr,aes(steering_type))+
  geom_bar()
ggplot(tr,aes(steering_type,fill=is_claim))+
  geom_bar()
ggplot(tr,aes(steering_type ,age_of_car,fill=is_claim))+
  geom_boxplot(outlier.color ="dark green")
ggplot(tr,aes(is_speed_alert))+
  geom_bar()
ggplot(tr,aes(is_power_steering))+
  geom_bar()
ggplot(tr,aes(is_brake_assist))+
  geom_bar()
ggplot(tr,aes(is_central_locking))+
  geom_bar() 
ggplot(tr,aes(is_power_door_locks))+
  geom_bar()
ggplot(tr,aes(is_ecw))+
  geom_bar()
ggplot(tr,aes(is_front_fog_lights))+
  geom_bar()
ggplot(tr,aes(is_tpms))+
  geom_bar()
ggplot(tr,aes(ncap_rating ,age_of_car,fill=is_claim))+
  geom_boxplot(outlier.color ="dark green")

#Data Exploration
no_claim_1<-tr%>%filter(age_of_car>=0.36&is_claim==1)
count(no_claim_1)
no_claim_2<-tr%>%filter(age_of_policyholder>=0.96&is_claim==1)
count(no_claim_2)
m<-tr%>%select(make,age_of_car)%>%group_by(make)%>%
  summarise(median=median(age_of_car))%>%
  arrange(desc(median))
m
n<-tr%>%select(ncap_rating,age_of_car)%>%group_by(ncap_rating)%>%
  summarise(median_age=median(age_of_car))
ncap<-n%>%arrange(desc(n))
ncap
n1<-tr%>%select(ncap_rating,age_of_car)%>%group_by(ncap_rating)
count(n1)%>%arrange(desc(n))  
spe<-tr%>%
  select(engine_type,ncap_rating,is_claim)%>%
  filter(engine_type=="1.5 Turbocharged Revotron"& ncap_rating=='5')
count(spe)
summary(tr$engine_type)

#separating numeric values
nums = unlist(lapply(tr, is.numeric))
empnums = tr[,nums]
head(empnums)

#Finding Highly Correlated Variables
correlationMatrix = cor(empnums)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff=0.5)
colnames(empnums[,highlyCorrelated])

#Removing Highly Correlated Variables
emp2=empnums[,-highlyCorrelated]
head(emp2)
colnames(emp2)

#Selecting the Important features
tr_in<-tr%>%select(c(displacement,policy_tenure,age_of_car,age_of_policyholder,population_density,height,is_claim))
summary(tr_in)
tt_in<-tt%>%select(c(displacement,policy_tenure,age_of_car,age_of_policyholder,population_density,height,is_claim))
summary(tt_in)

#Model Building - Random Forest
trctrl <- trainControl(method = "cv", number = 5)
rf= train(
  is_claim~.,
  data = tr_in_tr,
  trControl=trctrl,
  method = "rf",
  verboseIter=TRUE,
  allowParallel=TRUE,
  preProcess = c("center", "scale")
)
summary(rf)
predrf = predict.train(rf, newdata = tr_in_test)
confusionMatrix(predrf, tr_in_test$is_claim, mode = "prec_recall")

#Predicting the test data
predictions = predict(rf, newdata = tt_in)
predictions
summary(predictions)

#Model Building - xgbTree
xgbTree= train(
  is_claim~.,
  data = tr_in_tr,
  trControl=trctrl,
  method = "xgbTree",
  verboseIter=TRUE,
  allowParallel=TRUE,
  preProcess = c("center", "scale")
)
summary(xgbTree)
pred = predict.train(xgbTree, newdata = tr_in_test)
confusionMatrix(predrf, tr_in_test$is_claim, mode = "prec_recall")
#Predicting the test data
predictions = predict(xgbTree, newdata = tt_in)
predictions
summary(predictions)

